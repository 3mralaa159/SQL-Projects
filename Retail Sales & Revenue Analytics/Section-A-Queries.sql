-- 1. What is the total revenue generated across all stores?
-- Goal: Get a quick overview of total business revenue.
SELECT ROUND(SUM(quantity * unit_price), 2) AS total_revenue
FROM transaction_items;

-- 2. What is the revenue generated by each store?
-- Goal: Identify top and underperforming stores.
SELECT s.store_name, ROUND(SUM(ti.quantity * ti.unit_price), 2) AS store_revenue
FROM transaction_items ti
JOIN transactions t ON ti.transaction_id = t.transaction_id
JOIN stores s ON t.store_id = s.store_id
GROUP BY s.store_name
ORDER BY store_revenue DESC;

-- 3. What is the daily trend of total revenue?
-- Goal: Analyze short-term revenue fluctuations or patterns.
SELECT DATE(t.transaction_date) AS date, 
       ROUND(SUM(ti.quantity * ti.unit_price), 2) AS daily_revenue
FROM transaction_items ti
JOIN transactions t ON ti.transaction_id = t.transaction_id
GROUP BY DATE(t.transaction_date)
ORDER BY date;

-- 4. What is the Average Transaction Value (ATV)?
-- Goal: Measure the typical basket size per transaction.
SELECT ROUND(AVG(transaction_total), 2) AS avg_transaction_value
FROM (
    SELECT t.transaction_id, SUM(ti.quantity * ti.unit_price) AS transaction_total
    FROM transaction_items ti
    JOIN transactions t ON ti.transaction_id = t.transaction_id
    GROUP BY t.transaction_id
) AS sub;

-- 5. Which items generate the most revenue?
-- Goal: Rank items by sales volume and revenue contribution.
SELECT i.item_name, 
       ROUND(SUM(ti.quantity * ti.unit_price), 2) AS total_item_revenue,
       SUM(ti.quantity) AS units_sold
FROM transaction_items ti
JOIN items i ON ti.item_id = i.item_id
GROUP BY i.item_name
ORDER BY total_item_revenue DESC;

-- 6. How much revenue is generated by each client segment?
-- Goal: Evaluate the value of different customer segments.
SELECT c.segment, 
       ROUND(SUM(ti.quantity * ti.unit_price), 2) AS segment_revenue
FROM transaction_items ti
JOIN transactions t ON ti.transaction_id = t.transaction_id
JOIN clients c ON t.client_id = c.client_id
GROUP BY c.segment;

-- 7. What is the revenue trend per month?
-- Goal: Monitor revenue performance over time.
SELECT TO_CHAR(t.transaction_date, 'YYYY-MM') AS month, 
       ROUND(SUM(ti.quantity * ti.unit_price), 2) AS monthly_revenue
FROM transaction_items ti
JOIN transactions t ON ti.transaction_id = t.transaction_id
GROUP BY TO_CHAR(t.transaction_date, 'YYYY-MM')
ORDER BY month;

-- 8. What is the best-selling item in each store?
-- Goal: Identify top performers by store.
SELECT store_name, item_name, max_units_sold
FROM (
    SELECT s.store_name, i.item_name, 
           SUM(ti.quantity) AS max_units_sold,
           RANK() OVER(PARTITION BY s.store_id ORDER BY SUM(ti.quantity) DESC) AS rnk
    FROM transaction_items ti
    JOIN transactions t ON ti.transaction_id = t.transaction_id
    JOIN stores s ON t.store_id = s.store_id
    JOIN items i ON ti.item_id = i.item_id
    GROUP BY s.store_name, i.item_name
) sub
WHERE rnk = 1;

-- 9. How many transactions occurred in each store?
-- Goal: Understand customer activity and sales load per store.
SELECT s.store_name, COUNT(*) AS transaction_count
FROM transactions t
JOIN stores s ON t.store_id = s.store_id
GROUP BY s.store_name;

-- 10. How many units were sold per item category?
-- Goal: Spot high-volume or underperforming product categories.
SELECT category, SUM(ti.quantity) AS units_sold
FROM transaction_items ti
JOIN items i ON ti.item_id = i.item_id
GROUP BY category;

-- 11. What are the top 5 high-value transactions?
-- Goal: Track big spenders or large transactions for strategic insights.
SELECT t.transaction_id, ROUND(SUM(ti.quantity * ti.unit_price), 2) AS total_value
FROM transaction_items ti
JOIN transactions t ON ti.transaction_id = t.transaction_id
GROUP BY t.transaction_id
ORDER BY total_value DESC
LIMIT 5;

-- 12. What is the month-over-month revenue growth rate?
-- Goal: Track business growth performance.
WITH monthly_revenue AS (
  SELECT TO_CHAR(transaction_date, 'YYYY-MM') AS month,
         SUM(quantity * unit_price) AS revenue
  FROM transaction_items ti
  JOIN transactions t ON ti.transaction_id = t.transaction_id
  GROUP BY TO_CHAR(transaction_date, 'YYYY-MM')
)
SELECT month,
       ROUND(revenue, 2) AS current_revenue,
       ROUND(LAG(revenue) OVER (ORDER BY month), 2) AS previous_revenue,
       ROUND(((revenue - LAG(revenue) OVER (ORDER BY month)) / NULLIF(LAG(revenue) OVER (ORDER BY month), 0)) * 100, 2) AS growth_percent
FROM monthly_revenue;
